# Step 1: Install dependencies (run this in Colab or terminal)
# !pip install numpy pandas scikit-learn gradio

# Step 2: Import libraries
import numpy as np
import pandas as pd
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.metrics import r2_score
import gradio as gr

# Step 3: Load dataset
data = fetch_california_housing(as_frame=True)
df = data.frame
X = df.drop('MedHouseVal', axis=1)
y = df['MedHouseVal']

# Step 4: Split & scale data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 5: Train multiple models
models = {
    "Linear Regression": LinearRegression(),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "SVR": SVR()
}

r2_scores = {}
for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    r2_scores[name] = r2_score(y_test, y_pred)

# Step 6: Select best model
best_model_name = max(r2_scores, key=r2_scores.get)
best_model = models[best_model_name]

# Step 7: Define prediction function
def predict_price(MedInc, HouseAge, AveRooms, AveBedrms, Population, AveOccup, Latitude, Longitude):
    features = np.array([[MedInc, HouseAge, AveRooms, AveBedrms, Population, AveOccup, Latitude, Longitude]])
    features_scaled = scaler.transform(features)
    prediction = best_model.predict(features_scaled)[0]
    return f"🏡 Predicted House Price: ${prediction * 100000:.2f} \n📈 Model Used: {best_model_name}"

# Step 8: Build Gradio UI
with gr.Blocks() as demo:
    gr.Markdown("## 🏠 California House Price Predictor")
    gr.Markdown("Enter details below to predict the house price using **AI-powered ML models!** 🔮")

    with gr.Row():
        MedInc = gr.Number(label="💰 Median Income", value=3.5)
        HouseAge = gr.Number(label="🏗️ House Age", value=25)
        AveRooms = gr.Number(label="🛏️ Avg. Rooms", value=5)
        AveBedrms = gr.Number(label="🛌 Avg. Bedrooms", value=1.1)

    with gr.Row():
        Population = gr.Number(label="👨‍👩‍👧‍👦 Population", value=1000)
        AveOccup = gr.Number(label="🏘️ Avg. Occupancy", value=3)
        Latitude = gr.Number(label="🗺️ Latitude", value=34)
        Longitude = gr.Number(label="🧭 Longitude", value=-118)

    output = gr.Textbox(label="📊 Prediction", value="Predicted House Price will appear here.")
    predict_btn = gr.Button("🔍 Predict Price")
    predict_btn.click(fn=predict_price,
                      inputs=[MedInc, HouseAge, AveRooms, AveBedrms, Population, AveOccup, Latitude, Longitude],
                      outputs=output)

demo.launch()
